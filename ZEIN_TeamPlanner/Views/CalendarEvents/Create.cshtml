@model ZEIN_TeamPlanner.Models.CreateEventDto

@{
    ViewData["Title"] = "Create Event - " + ViewBag.GroupName;
}

<h2>Create Event in @ViewBag.GroupName</h2>

<form asp-action="Create" method="post" id="createEventForm">
    <input type="hidden" asp-for="GroupId" />
    <div class="form-group mb-3">
        <label asp-for="Title" class="form-label"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <div class="form-group mb-3">
        <label asp-for="Description" class="form-label"></label>
        <textarea asp-for="Description" class="form-control" rows="4"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <div class="form-group mb-3">
        <label asp-for="StartTime" class="form-label"></label>
        <input asp-for="StartTime" class="form-control" type="datetime-local" id="startTime" value="@Model.StartTime.ToString("yyyy-MM-ddTHH:mm")" />
        <span asp-validation-for="StartTime" class="text-danger"></span>
    </div>
    <div class="form-group mb-3">
        <label asp-for="EndTime" class="form-label"></label>
        <input asp-for="EndTime" class="form-control" type="datetime-local" id="endTime" value="@(Model.EndTime.HasValue? Model.EndTime.Value.ToString("yyyy-MM-ddTHH:mm") : "")" />
        <span asp-validation-for="EndTime" class="text-danger"></span>
    </div>
    <div class="form-group mb-3">
        <label asp-for="TimeZoneId" class="form-label"></label>
        <select asp-for="TimeZoneId" class="form-select" asp-items="ViewBag.TimeZones">
            <option value="Asia/Ho_Chi_Minh" selected>Asia/Ho_Chi_Minh</option>
        </select>
        <span asp-validation-for="TimeZoneId" class="text-danger"></span>
    </div>
    <div class="form-group mb-3">
        <label asp-for="Type" class="form-label"></label>
        <select asp-for="Type" class="form-select">
            <option value="@CalendarEvent.EventType.Meeting">Meeting</option>
            <option value="@CalendarEvent.EventType.Deadline">Deadline</option>
            <option value="@CalendarEvent.EventType.Reminder">Reminder</option>
        </select>
        <span asp-validation-for="Type" class="text-danger"></span>
    </div>
    <div class="form-group mb-3">
        <label asp-for="IsAllDay" class="form-label"></label>
        <input asp-for="IsAllDay" type="checkbox" class="form-check-input" />
        <span asp-validation-for="IsAllDay" class="text-danger"></span>
    </div>
    <div class="form-group mb-3">
        <label class="form-label">Recurrence Rule</label>
        <input type="hidden" asp-for="RecurrenceRule" id="rrule-input" />
        <div id="rrule-builder">
            <div class="mb-2">
                <label>Frequency</label>
                <select id="rrule-freq" class="form-select">
                    <option value="DAILY">Daily</option>
                    <option value="WEEKLY">Weekly</option>
                    <option value="MONTHLY">Monthly</option>
                    <option value="YEARLY">Yearly</option>
                </select>
            </div>
            <div class="mb-2" id="rrule-byweekday" style="display:none;">
                <label>Days</label>
                <div>
                    <input type="checkbox" id="rrule-mo" value="MO"> Mon
                    <input type="checkbox" id="rrule-tu" value="TU"> Tue
                    <input type="checkbox" id="rrule-we" value="WE"> Wed
                    <input type="checkbox" id="rrule-th" value="TH"> Thu
                    <input type="checkbox" id="rrule-fr" value="FR"> Fri
                    <input type="checkbox" id="rrule-sa" value="SA"> Sat
                    <input type="checkbox" id="rrule-su" value="SU"> Sun
                </div>
            </div>
            <div class="mb-2">
                <label>Interval</label>
                <input type="number" id="rrule-interval" class="form-control" value="1" min="1" />
            </div>
            <div class="mb-2">
                <label>End</label>
                <select id="rrule-end" class="form-select">
                    <option value="never">Never</option>
                    <option value="count">After</option>
                    <option value="until">On date</option>
                </select>
                <div id="rrule-count" style="display:none;">
                    <input type="number" id="rrule-count-value" class="form-control" value="1" min="1" />
                </div>
                <div id="rrule-until" style="display:none;">
                    <input type="date" id="rrule-until-value" class="form-control" />
                </div>
            </div>
            <div id="rrule-preview" class="text-muted"></div>
        </div>
        <span asp-validation-for="RecurrenceRule" class="text-danger"></span>
    </div>
    <div class="form-group mb-3">
        <button type="submit" class="btn btn-primary">Create Event</button>
        <a asp-action="Index" asp-route-groupId="@Model.GroupId" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdn.jsdelivr.net/npm/rrule@2.7.2/dist/es5/rrule.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('createEventForm');
            const startTimeInput = document.getElementById('startTime');
            const endTimeInput = document.getElementById('endTime');

            form.addEventListener('submit', function (event) {
                let isValid = true;
                const startTime = new Date(startTimeInput.value);
                const endTime = endTimeInput.value ? new Date(endTimeInput.value) : null;

                if (!startTimeInput.value) {
                    isValid = false;
                    startTimeInput.setCustomValidity("Thời gian bắt đầu là bắt buộc.");
                    startTimeInput.reportValidity();
                } else {
                    startTimeInput.setCustomValidity("");
                }

                if (endTime && endTime <= startTime) {
                    isValid = false;
                    endTimeInput.setCustomValidity("Thời gian kết thúc phải lớn hơn thời gian bắt đầu.");
                    endTimeInput.reportValidity();
                } else {
                    endTimeInput.setCustomValidity("");
                }

                if (!isValid) {
                    event.preventDefault();
                }
            });

            const freqSelect = document.getElementById('rrule-freq');
            const byWeekdayDiv = document.getElementById('rrule-byweekday');
            const endSelect = document.getElementById('rrule-end');
            const countDiv = document.getElementById('rrule-count');
            const untilDiv = document.getElementById('rrule-until');
            const rruleInput = document.getElementById('rrule-input');
            const preview = document.getElementById('rrule-preview');

            function updateRRule() {
                const freq = freqSelect.value;
                const interval = parseInt(document.getElementById('rrule-interval').value) || 1;
                const end = endSelect.value;
        
                let options = {
                    freq: RRule[freq],
                    interval: interval
                };

                if (freq === 'WEEKLY') {
                    const days = [];
                    ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su'].forEach(day => {
                        if (document.getElementById(`rrule-${day}`).checked) {
                            days.push(RRule[day.toUpperCase()]);
                        }
                    });
                    if (days.length > 0) {
                        options.byweekday = days;
                    }
                }

                if (end === 'count') {
                    options.count = parseInt(document.getElementById('rrule-count-value').value) || 1;
                } else if (end === 'until') {
                    const untilDate = document.getElementById('rrule-until-value').value;
                    if (untilDate) {
                        options.until = new Date(untilDate);
                    }
                }

                try {
                    const rule = new RRule(options);
                    rruleInput.value = rule.toString().replace('RRULE:', '');
                    preview.textContent = rule.toText();
                } catch (e) {
                    rruleInput.value = '';
                    preview.textContent = 'Invalid recurrence rule';
                }
            }

            freqSelect.addEventListener('change', function () {
                byWeekdayDiv.style.display = freqSelect.value === 'WEEKLY' ? 'block' : 'none';
                updateRRule();
            });

            endSelect.addEventListener('change', function () {
                countDiv.style.display = endSelect.value === 'count' ? 'block' : 'none';
                untilDiv.style.display = endSelect.value === 'until' ? 'block' : 'none';
                updateRRule();
            });

            document.querySelectorAll('#rrule-builder input, #rrule-builder select').forEach(el => {
                el.addEventListener('change', updateRRule);
            });

            updateRRule();
        });
    </script>
}