@{
    ViewData["Title"] = "Global Calendar";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<link rel="stylesheet" href="~/css/calendarEventGlobalCalendar.css" />

<div class="container">
    <h2>Global Calendar</h2>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (ViewBag.Message != null)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            @ViewBag.Message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="button-group">
        <a asp-controller="Groups" asp-action="Index" class="btn btn-primary">
            <i class="bi bi-arrow-left-circle"></i> Back to Groups
        </a>
    </div>

    <div id="calendar"></div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                editable: false, // Tasks are not draggable
                events: {
                    url: '@Url.Action("GetAllEvents", "CalendarEvents")',
                    method: 'GET'
                },
                eventClick: function (info) {
                    info.jsEvent.preventDefault();
                    var props = info.event.extendedProps;
                    var id = info.event.id.replace('event-', '').replace('task-', '');
                    if (props.type === 'Task') {
                        window.location.href = '@Url.Action("Details", "TaskItems")/' + id;
                    } else {
                        window.location.href = '@Url.Action("Details", "CalendarEvents")/' + id;
                    }
                },
                eventDrop: function (info) {
                    if (info.event.extendedProps.type === 'Task') {
                        alert('Tasks cannot be rescheduled.');
                        calendar.refetchEvents();
                        return;
                    }
                    updateEventDetails(info);
                },
                eventResize: function (info) {
                    if (info.event.extendedProps.type === 'Task') {
                        alert('Tasks cannot be resized.');
                        calendar.refetchEvents();
                        return;
                    }
                    updateEventDetails(info);
                },
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    timeZoneName: 'short'
                },
                eventDidMount: function (info) {
                    if (info.event.extendedProps.type === 'Task') {
                        info.el.classList.add('task');
                        if (info.event.extendedProps.status === 'Done') {
                            var titleElement = info.el.querySelector('.fc-event-title');
                            if (titleElement) {
                                titleElement.style.textDecoration = 'line-through';
                            }
                        }
                    } else if (info.event.extendedProps.type === 'Meeting') {
                        info.el.classList.add('meeting');
                    } else if (info.event.extendedProps.type === 'Deadline') {
                        info.el.classList.add('deadline');
                    } else if (info.event.extendedProps.type === 'Reminder') {
                        info.el.classList.add('reminder');
                    }
                }
            });

            function updateEventDetails(info) {
                fetch('@Url.Action("UpdateEventTime", "CalendarEvents")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        id: info.event.id.replace('event-', ''),
                        start: info.event.start.toISOString(),
                        end: info.event.end ? info.event.end.toISOString() : null
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        alert('Không thể cập nhật thời gian sự kiện.');
                        calendar.refetchEvents();
                    } else {
                        // Optional: Add TempData success message via JavaScript
                        // Could use a toast notification library if desired
                    }
                })
                .catch(() => {
                    alert('Lỗi khi cập nhật sự kiện.');
                    calendar.refetchEvents();
                });
            }

            calendar.render();
        });
    </script>
}