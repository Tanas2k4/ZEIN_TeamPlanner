@model List<ZEIN_TeamPlanner.Models.Notification>

@{
    ViewData["Title"] = "Notifications";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<link rel="stylesheet" href="~/css/notificationIndex.css" />

<div class="container">
    <h2>Notifications</h2>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @* <div class="button-group">
        <form id="markAllReadForm">
            @Html.AntiForgeryToken()
            <button id="markAllRead" class="btn btn-primary" type="submit">
                <i class="bi bi-check-all"></i> Mark all as read
            </button>
        </form>
    </div> *@

    <div class="list-group">
        @{
            var groupedNotifications = Model
            .OrderByDescending(n => n.CreatedAt)
            .GroupBy(n => n.CreatedAt.Date)
            .ToList();
        }
        @foreach (var group in groupedNotifications)
        {
            <h6 class="mt-3 mb-2 text-muted" style="font-weight: 600; border-bottom: 1px solid #dee2e6; padding-bottom: 0.5rem;">
                @group.Key.ToString("dd/MM/yyyy")
            </h6>
            @foreach (var notification in group)
            {
                var url = notification.RelatedEntityType switch
                {
                    "TaskItem" => Url.Action("Details", "TaskItems", new { id = notification.RelatedEntityId }),
                    "Group" => Url.Action("Details", "Groups", new { id = notification.RelatedEntityId }),
                    "CalendarEvent" => Url.Action("Details", "CalendarEvents", new { id = notification.RelatedEntityId }),
                    _ => "#"
                };
                var iconClass = notification.RelatedEntityType switch
                {
                    "TaskItem" => "bi-list-task",
                    "Group" => "bi-people",
                    "CalendarEvent" => "bi-calendar-event",
                    _ => "bi-bell"
                };
                <a href="@url" class="list-group-item list-group-item-action @(notification.IsRead ? "" : "list-group-item-primary")" data-notification-id="@notification.Id">
                    <div class="d-flex w-100 justify-content-between align-items-center">
                        <span><i class="bi @iconClass notification-icon"></i>@notification.Message</span>
                        <small>@notification.CreatedAt.ToString("dd/MM/yyyy, HH:mm")</small>
                    </div>
                </a>
            }
        }
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Kiểm tra jQuery
            if (typeof $ === 'undefined') {
                console.error("jQuery is not loaded.");
                return;
            }

            $("#markAllReadForm").submit(function (e) {
                e.preventDefault();
                console.log("Mark all as read clicked");
                $.ajax({
                    url: "/Notifications/MarkAllAsRead",
                    method: "POST",
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    success: function (response) {
                        console.log("MarkAllAsRead success:", response);
                        if (response.message === "No unread notifications to mark.") {
                            alert("No unread notifications to mark.");
                        }
                        location.reload();
                    },
                    error: function (err) {
                        console.error("Error marking all as read:", err.status, err.responseText);
                        alert("Failed to mark all as read. Check console for details.");
                    }
                });
            });

            $(".list-group-item").on("click", function (e) {
                const notificationId = $(this).data("notification-id");
                if ($(this).hasClass("list-group-item-primary")) {
                    console.log("Marking notification as read, ID:", notificationId);
                    $.ajax({
                        url: "/Notifications/MarkAsRead",
                        method: "POST",
                        contentType: "application/json",
                        headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                        data: JSON.stringify({ NotificationIds: [notificationId] }),
                        success: function () {
                            console.log("Notification marked as read, ID:", notificationId);
                            $(`a[data-notification-id="${notificationId}"]`).removeClass("list-group-item-primary");
                        },
                        error: function (err) {
                            console.error("Error marking notification as read:", err.status, err.responseText);
                        }
                    });
                }
            });
        });
    </script>
}