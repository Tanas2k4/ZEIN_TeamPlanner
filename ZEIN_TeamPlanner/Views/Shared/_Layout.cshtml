@using Microsoft.AspNetCore.Identity
@using ZEIN_TeamPlanner.Models
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@{
    string currentController = ViewContext.RouteData.Values["controller"]?.ToString() ?? string.Empty;
    string currentAction = ViewContext.RouteData.Values["action"]?.ToString() ?? string.Empty;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Set character encoding and page title -->
    <meta charset="utf-8" />
    <title>@ViewData["Title"] - ZEIN TeamPlanner</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Favicon and CSS dependencies -->
    <link rel="icon" type="image/x-icon" href="~/zeinIcon.ico" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/main.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/animate.css@4.1.1/animate.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet" />
    @RenderSection("Styles", required: false)
    <link href="~/css/_layout.css?v=@DateTime.Now.Ticks" rel="stylesheet" />
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar p-3 animate__animated animate__fadeInLeft">
        <!-- Logo with link to Dashboard -->
        <h4 class="mb-4 text-gradient">
            <a asp-controller="Dashboard" asp-action="Index" class="text-decoration-none">ZEIN Planner</a>
        </h4>
        <div class="mb-4 user-profile animate__animated animate__pulse animate__delay-1s">
            <div class="d-flex align-items-center">
                @if (SignInManager.IsSignedIn(User))
                {
                    var user = await UserManager.GetUserAsync(User);
                    if (user != null)
                    {
                        <!-- Display user avatar and details if signed in -->
                        <img src="@user.AvatarUrl" alt="User Avatar" class="avatar" />
                        <div>
                            <p style="text-align: center"><strong>@user.FullName</strong></p>
                            <p>@user.Email</p>
                        </div>
                    }
                }
                else
                {
                    <!-- Display guest avatar and login/register links if not signed in -->
                    <img src="/images/default-avatar.png" alt="Default Avatar" class="avatar" />
                    <div>
                        <p><strong>Guest</strong></p>
                        <p>
                            <a asp-area="Identity" asp-page="/Account/Login">Login</a> |
                            <a asp-area="Identity" asp-page="/Account/Register">Register</a>
                        </p>
                    </div>
                }
            </div>
        </div>
        <!-- Navigation menu -->
        <nav class="nav flex-column">
            <a class="nav-link @(currentController == "Dashboard" ? "active" : "")" asp-controller="Dashboard" asp-action="Index" data-bs-toggle="tooltip" title="Go to Dashboard">
                <i class="bi bi-grid me-2"></i> Dashboard
            </a>
            <!-- <a class="nav-link @(currentController == "Messages" ? "active" : "")" asp-controller="Messages" asp-action="Index" data-bs-toggle="tooltip" title="View Messages">
                <i class="bi bi-chat-dots me-2"></i> Messages
            </a> -->
            <a class="nav-link @(currentController == "TaskItems" ? "active" : "")" asp-controller="TaskItems" asp-action="GlobalTasks" data-bs-toggle="tooltip" title="Manage Tasks">
                <i class="bi bi-list-task me-2"></i> Tasks
            </a>
            <a class="nav-link @(currentController == "Groups" ? "active" : "")" asp-controller="Groups" asp-action="Index" data-bs-toggle="tooltip" title="View Groups">
                <i class="bi bi-people me-2"></i> Groups
            </a>
            <a class="nav-link @(currentController == "Setting" ? "active" : "")" asp-controller="Setting" asp-action="Index" data-bs-toggle="tooltip" title="Adjust Settings">
                <i class="bi bi-gear me-2"></i> Settings
            </a>
        </nav>
    </div>

    <!-- Main content -->
    <div class="main-content animate__animated animate__fadeIn">
        <!-- Topbar -->
        <div class="topbar d-flex justify-content-between align-items-center shadow-sm">
            <div class="btn-group" role="group" aria-label="Navigation group">
                <a class="btn btn-outline-dark d-flex align-items-center @(currentController == "TaskItems" ? "active" : "")" style="border: none;" asp-controller="TaskItems" asp-action="GlobalTasks">
                    <i class="bi bi-list-task me-1"></i> Tasks
                </a>
                <a class="btn btn-outline-dark d-flex align-items-center @(currentController == "Groups" ? "active" : "")" style="border: none;" asp-controller="Groups" asp-action="Index">
                    <i class="bi bi-grid me-1"></i> Groups
                </a>
                <!-- <a class="btn btn-outline-dark d-flex align-items-center @(currentController == "Report" ? "active" : "")" style="border: none;" asp-controller="Report" asp-action="Index">
                    <i class="bi bi-bar-chart me-1"></i> Reports
                </a> -->
            </div>

            <!-- Search bar -->
            <form class="d-flex" role="search" style="max-width: 300px;">
                <input class="form-control me-2 search-input animate__animated animate__fadeInRight" style="border: 2px solid #ddd; transition: all 0.3s ease;" type="search" placeholder="Search for anything..." aria-label="Search" />
            </form>

            <!-- Icon group for topbar actions -->
            <div class="icon-group d-flex align-items-center gap-3">
                <a asp-controller="CalendarEvents" asp-action="GlobalCalendar" class="custom-icon-btn" data-bs-toggle="tooltip" title="Calendar"><i class="bi bi-calendar2-week"></i></a>
                <a href="#" class="custom-icon-btn" data-bs-toggle="tooltip" title="Help"><i class="bi bi-question-circle-fill"></i></a>
                <!-- Notification Dropdown -->
                <div class="dropdown">
                    <a class="custom-icon-btn position-relative" href="#" role="button" id="notificationDropdown" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside" title="Notifications">
                        <i class="bi bi-bell-fill"></i>
                        <span id="notificationBadge" class="badge bg-danger rounded-pill position-absolute top-0 start-100 translate-middle" style="display: none;"></span>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end p-0 shadow-lg animate__animated animate__fadeIn" aria-labelledby="notificationDropdown">
                        <div class="notification-header">
                            <h6>Notifications</h6>
                            <a href="#" id="markAllRead" class="mark-all-read">Mark all as read</a>
                        </div>
                        <div id="notificationList" class="list-group">
                            <!-- Notifications loaded via AJAX -->
                        </div>
                        <div class="p-2 border-top text-center">
                            <a asp-controller="Notifications" asp-action="Index" class="text-decoration-none">View all notifications</a>
                        </div>
                    </div>
                </div>
                <!-- Add Group button -->
                <a class="btn text-white animate__animated animate__pulse animate__infinite" style="background-color: #00AE72;" asp-controller="Groups" asp-action="Create">
                    <i class="bi bi-plus-lg"></i> Add Group
                </a>
            </div>
        </div>

        <!-- Page content -->
        <main role="main" class="mt-4">
            @RenderBody()
        </main>
    </div>

    <!-- JavaScript dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.43/moment-timezone-with-data.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/frappe-gantt@0.6.1/dist/frappe-gantt.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <script>
        $(document).ready(function () {
            // Check if SignalR is loaded
            if (typeof signalR === "undefined") {
                console.error("SignalR is not loaded. Notifications will not work.");
                $("#notificationList").append('<div class="p-2 text-danger text-center">SignalR not available</div>');
                return;
            }

            // Initialize SignalR connection for notifications
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/notificationHub")
                .withAutomaticReconnect()
                .build();

            // Handle incoming notifications
            connection.on("ReceiveNotification", function (notification) {
                console.log("Received notification:", notification);
                addNotification(notification);
                updateBadge();
            });

            // Start SignalR connection
            connection.start().catch(function (err) {
                console.error("SignalR Connection Error:", err);
            });

            // Load notifications on page load
            loadNotifications();

            // Mark all notifications as read on click
            $("#markAllRead").click(function (e) {
                e.preventDefault();
                markAllAsRead();
            });

            // Load notifications when dropdown is shown
            $("#notificationDropdown").on("shown.bs.dropdown", function () {
                loadNotifications();
            });

            // Function to load notifications via AJAX
            function loadNotifications() {
                $.ajax({
                    url: "/Notifications/GetNotifications",
                    method: "GET",
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    success: function (response) {
                        $("#notificationList").empty();
                        let notifications = Array.isArray(response) ? response : (response.data || []);
                        if (notifications.length === 0) {
                            $("#notificationList").append('<div class="p-2 text-muted text-center">No notifications</div>');
                            $("#markAllRead").hide();
                        } else {
                            notifications.reverse().forEach(notification => addNotification(notification));
                            $("#markAllRead").show();
                        }
                        updateBadge();
                    },
                    error: function (err) {
                        console.error("Error loading notifications:", err);
                        $("#notificationList").append('<div class="p-2 text-danger text-center">Error loading notifications</div>');
                    }
                });
            }

            // Function to add a notification to the dropdown
            function addNotification(notification) {
                const isReadClass = notification.isRead ? "" : "list-group-item-primary";
                let url = "#";
                let iconClass = "";
                if (notification.relatedEntityType === "TaskItem") {
                    url = `/TaskItems/Details/${notification.relatedEntityId}`;
                    iconClass = "bi-list-task";
                } else if (notification.relatedEntityType === "Group") {
                    url = `/Groups/Details/${notification.relatedEntityId}`;
                    iconClass = "bi-people";
                } else if (notification.relatedEntityType === "CalendarEvent") {
                    url = `/CalendarEvents/Details/${notification.relatedEntityId}`;
                    iconClass = "bi-calendar-event";
                }

                const notificationHtml = `
                    <a href="${url}" class="list-group-item list-group-item-action ${isReadClass}" data-notification-id="${notification.id}">
                        <div class="d-flex w-100 justify-content-between align-items-center">
                            <span><i class="bi ${iconClass} notification-icon"></i>${notification.message}</span>
                            <small>${moment.utc(notification.createdAt).tz('Asia/Ho_Chi_Minh').format('DD/MM/YYYY, HH:mm')}</small>
                        </div>
                    </a>
                `;
                $("#notificationList").prepend(notificationHtml);

                // Mark notification as read on click
                $(`#notificationList a[data-notification-id="${notification.id}"]`).on("click", function (e) {
                    if (!notification.isRead) {
                        markNotificationAsRead(notification.id);
                    }
                });
            }

            // Function to mark a single notification as read
            function markNotificationAsRead(notificationId) {
                $.ajax({
                    url: "/Notifications/MarkAsRead",
                    method: "POST",
                    contentType: "application/json",
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    data: JSON.stringify({ notificationIds: [notificationId] }),
                    success: function () {
                        $(`#notificationList a[data-notification-id="${notificationId}"]`).removeClass("list-group-item-primary");
                        updateBadge();
                    },
                    error: function (err) {
                        console.error("Error marking notification as read:", err);
                    }
                });
            }

            // Function to update the notification badge
            function updateBadge() {
                const unreadCount = $("#notificationList .list-group-item-primary").length;
                const badge = $("#notificationBadge");
                if (unreadCount > 0) {
                    badge.text(unreadCount > 9 ? "9+" : unreadCount).show();
                } else {
                    badge.hide();
                }
            }

            // Function to mark all notifications as read
            function markAllAsRead() {
                const notificationIds = $("#notificationList .list-group-item-primary").map(function () {
                    const id = $(this).data("notification-id");
                    return isNaN(id) ? null : parseInt(id);
                }).get().filter(id => id !== null);
                console.log("Marking as read - Valid IDs:", notificationIds);

                if (notificationIds.length > 0) {
                    $.ajax({
                        url: "/Notifications/MarkAsRead",
                        method: "POST",
                        contentType: "application/json",
                        headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                        data: JSON.stringify({ notificationIds: notificationIds }),
                        success: function () {
                            $("#notificationList .list-group-item-primary").removeClass("list-group-item-primary");
                            updateBadge();
                            $("#markAllRead").hide();
                        },
                        error: function (err) {
                            console.error("Error marking notifications as read:", err);
                        }
                    });
                }
            }
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>